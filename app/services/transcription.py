import os
import json
import subprocess
from typing import List, Optional
from pathlib import Path
import ffmpeg
from app.core.config import settings_model
import logging
import time
import psutil
from tempfile import NamedTemporaryFile
import re

logger = logging.getLogger(__name__)

def log_system_stats():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    cpu_percent = psutil.cpu_percent()
    memory = psutil.virtual_memory()
    logger.info(f"CPU Usage: {cpu_percent}% | RAM: {memory.percent}% | Available RAM: {memory.available / 1024 / 1024:.0f}MB")

class TranscriptionService:
    def __init__(
        self,
        model_size: Optional[str] = None,
        compute_type: str = "float16"
    ):
        logger.info("üöÄ Initializing whisper model...")
        log_system_stats()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—É—é –º–æ–¥–µ–ª—å —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        self.model_path = os.path.join(os.path.dirname(__file__), "../models/ggml-medium.bin")
        self.whisper_cli = os.path.join(os.path.dirname(__file__), "../lib/whisper/build/bin/whisper-cli")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
        if not os.path.exists(self.whisper_cli):
            logger.info("Building whisper.cpp...")
            self._build_whisper_cpp()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
        if not os.path.exists(self.model_path):
            logger.info("Downloading whisper model...")
            model_dir = os.path.dirname(self.model_path)
            os.makedirs(model_dir, exist_ok=True)
            download_script = os.path.join(os.path.dirname(__file__), "../lib/whisper/models/download-ggml-model.sh")
            subprocess.run(["sh", download_script, "medium", model_dir], check=True)
        
        logger.info("‚úÖ Whisper model initialized successfully")
        log_system_stats()

    def _build_whisper_cpp(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç whisper.cpp —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Metal"""
        whisper_dir = os.path.join(os.path.dirname(__file__), "../lib/whisper")
        
        # –°–æ–∑–¥–∞–µ–º build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs(os.path.join(whisper_dir, "build"), exist_ok=True)
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Metal
        subprocess.run(["cmake", "-B", "build", "-DWHISPER_METAL=ON"], cwd=whisper_dir, check=True)
        subprocess.run(["cmake", "--build", "build", "--config", "Release"], cwd=whisper_dir, check=True)

    def transcribe_file(
        self, 
        audio_path: str,
        language: Optional[str] = None,
        beam_size: Optional[int] = None
    ) -> List[dict]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è whisper.cpp —Å Metal —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º."""
        try:
            logger.info(f"\n{'='*50}\nüéØ Starting transcription: {audio_path}\n{'='*50}")
            log_system_stats()
            
            beam_size = beam_size or settings_model.TRANSCRIPTION_BEAM_SIZE
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è JSON –≤—ã–≤–æ–¥–∞
            with NamedTemporaryFile(suffix='.json') as tmp_json:
                # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è whisper.cpp
                cmd = [
                    self.whisper_cli,
                    "-m", self.model_path,
                    "-f", audio_path,
                    "-oj",  # JSON output
                    "-of", tmp_json.name[:-5],  # –£–±–∏—Ä–∞–µ–º .json —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                    "-pp",  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                    "-pc",  # –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
                    "--print-progress",  # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    "--print-special",   # –í—ã–≤–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                    "-t", "4",           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
                    "-bs", str(beam_size),  # –†–∞–∑–º–µ—Ä –ª—É—á–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                    "-bo", "5",          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É—á—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                    "-wt", "0.01",       # –ü–æ—Ä–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤
                    "-ml", "0",          # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–µ–≥–º–µ–Ω—Ç–∞
                    "-ac", "0",          # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    "--temperature", "0.0"  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                ]
                
                if language:
                    cmd.extend(["-l", language])
                    # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º prompt –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                    if language.lower() == 'ru':
                        cmd.extend(["--prompt", "–î–∞–ª–µ–µ –∏–¥–µ—Ç —Ä—É—Å—Å–∫–∞—è —Ä–µ—á—å"])
                
                logger.info(f"Running whisper.cpp command: {' '.join(cmd)}")
                logger.info(f"System info before transcription:")
                log_system_stats()
                
                start_time = time.time()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                process = subprocess.run(cmd, capture_output=True, text=True)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                if process.stdout:
                    logger.info(f"Whisper output: {process.stdout}")
                if process.stderr:
                    logger.warning(f"Whisper stderr: {process.stderr}")
                
                if process.returncode != 0:
                    logger.error(f"Whisper CLI error: {process.stderr}")
                    raise Exception(f"Transcription failed: {process.stderr}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if not os.path.exists(tmp_json.name):
                    logger.error(f"JSON output file not found: {tmp_json.name}")
                    raise Exception("Transcription output file not found")
                
                # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
                try:
                    with open(tmp_json.name, 'r') as f:
                        results = json.load(f)
                except json.JSONDecodeError as e:
                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    with open(tmp_json.name, 'r') as f:
                        content = f.read()
                    logger.error(f"JSON file content: {content}")
                    logger.error(f"Failed to parse JSON output: {str(e)}")
                    raise Exception("Failed to parse transcription output")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                logger.info(f"Transcription results: {results}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
                segments = []
                for segment in results.get('transcription', []):
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
                    text = segment.get('text', '').strip()
                    
                    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                    text = text.replace('[_BEG_]', '').strip()
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤–∏–¥–∞ [_TT_XXX]
                    text = re.sub(r'\[_TT_\d+\]', '', text).strip()
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
                    text = ' '.join(text.split())
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                    if text:
                        try:
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥—ã
                            def time_to_seconds(time_str: str) -> float:
                                try:
                                    # –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: "00:00:00,000"
                                    main_part, ms_part = time_str.split(',')
                                    h, m, s = map(int, main_part.split(':'))
                                    return h * 3600 + m * 60 + s + int(ms_part) / 1000
                                except (ValueError, IndexError) as e:
                                    logger.warning(f"Failed to parse timestamp {time_str}: {e}")
                                    return 0.0

                            start_time = time_to_seconds(segment['timestamps']['from'])
                            end_time = time_to_seconds(segment['timestamps']['to'])

                            segments.append({
                                'start': start_time,
                                'end': end_time,
                                'text': text
                            })
                        except Exception as e:
                            logger.warning(f"Failed to process segment {segment}: {e}")
                            continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç
                if not segments:
                    logger.warning("No valid text segments found in transcription output")
                    raise Exception("No valid text segments found in transcription output")
            
            logger.info(f"\n{'='*50}\n‚úÖ Transcription completed\n{'='*50}")
            logger.info(f"Transcription took {time.time() - start_time:.2f} seconds")
            logger.info(f"System info after transcription:")
            log_system_stats()
            return segments
            
        except Exception as e:
            logger.error(f"‚ùå Transcription failed: {str(e)}")
            raise

    @staticmethod
    def merge_segments(segments: List[dict]) -> str:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç."""
        return " ".join(segment['text'].strip() for segment in segments) 